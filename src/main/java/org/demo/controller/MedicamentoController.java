/*
*  Copyright (c) 2019. All right reserved
* Created on 2023-08-06 ( Date ISO 2023-08-06 - Time 09:55:41 )
* Generated by Telosys Tools Generator ( version 4.0.0 )
*/
package org.demo.controller;

import org.demo.entities.Medicamento;
import org.demo.service.MedicamentoService;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;


/**
 * REST controller for managing {@link Medicamento}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/medicamento")
public class MedicamentoController {

    private final Logger log = LoggerFactory.getLogger(MedicamentoController.class);
	
    private final MedicamentoService entityService;

 	public MedicamentoController (MedicamentoService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /medicamento} : Create a new medicamento.
     *
     * @param medicamento the medicamento to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new medicamento.
     */
	@PostMapping()
	public ResponseEntity<Medicamento> createMedicamento(@RequestBody @Valid Medicamento medicamento) {
         log.debug("REST request to save Medicamento : {}", medicamento);
         return new ResponseEntity<>(entityService.create(medicamento), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /medicamento} : Updates an existing medicamento.
     *
     * @param medicamento the medicamento to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated medicamento,
     * or with status {@code 400 (Bad Request)} if the medicamento is not valid,
     * or with status {@code 500 (Internal Server Error)} if the medicamento couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<Medicamento> updateMedicamento(@Valid @RequestBody Medicamento medicamento) {
        log.debug("REST request to update Medicamento : {}", medicamento);
        Medicamento result = entityService.update(medicamento);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /medicamento} : get all the medicamentos.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of medicamento in body.
     */

    @GetMapping()
    public ResponseEntity<List<Medicamento>> getAllMedicamento() {
	    log.debug("REST request to get all medicamentos");
        List<Medicamento> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /medicamento/:id} : get the "id" medicamento.
     *
     * @param id the id of the medicamento to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the medicamento, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<Medicamento> getOneMedicamento(@PathVariable("id") int id) {
        log.debug("REST request to get Medicamento : {}", id);
        Medicamento e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /medicamento/:id} : delete the "id" medicamento.
     *
     * @param id the id of the medicamento to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteMedicamento(@PathVariable("id") int id) {
        log.debug("REST request to delete Medicamento : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
