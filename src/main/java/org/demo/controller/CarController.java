/*
*  Copyright (c) 2019. All right reserved
* Created on 2023-07-26 ( Date ISO 2023-07-26 - Time 21:42:57 )
* Generated by Telosys Tools Generator ( version 4.0.0 )
*/
package org.demo.controller;

import org.demo.entities.Car;
import org.demo.service.CarService;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;


/**
 * REST controller for managing {@link Car}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/car")
public class CarController {

    private final Logger log = LoggerFactory.getLogger(CarController.class);
	
    private final CarService entityService;

 	public CarController (CarService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /car} : Create a new car.
     *
     * @param car the car to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new car.
     */
	@PostMapping()
	public ResponseEntity<Car> createCar(@RequestBody @Valid Car car) {
         log.debug("REST request to save Car : {}", car);
         return new ResponseEntity<>(entityService.create(car), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /car} : Updates an existing car.
     *
     * @param car the car to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated car,
     * or with status {@code 400 (Bad Request)} if the car is not valid,
     * or with status {@code 500 (Internal Server Error)} if the car couldn't be updated.
     */
    @PutMapping()
    public ResponseEntity<Car> updateCar(@Valid @RequestBody Car car) {
        log.debug("REST request to update Car : {}", car);
        Car result = entityService.update(car);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /car} : get all the cars.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of car in body.
     */

    @GetMapping()
    public ResponseEntity<List<Car>> getAllCar() {
	    log.debug("REST request to get all cars");
        List<Car> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /car/:id} : get the "id" car.
     *
     * @param id the id of the car to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the car, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<Car> getOneCar(@PathVariable("id") int id) {
        log.debug("REST request to get Car : {}", id);
        Car e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /car/:id} : delete the "id" car.
     *
     * @param id the id of the car to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCar(@PathVariable("id") int id) {
        log.debug("REST request to delete Car : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
